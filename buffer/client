#!/bin/bash

# This client script receives newly-built files from the server script
# and (1) writes them out to the Buffer and (2) feeds them to the chopper.
# When the chopper has run to completion, it touches the file filereceived
# on the Buffer to advance the server.  There is a client log that records
# the output of the Chopper as well as statements when files are complete.
# The client also writes a joblog file for each builder file at
# $RUN.chopper.log to record the job numbers associated to that file.

# This script is designed for use with the L2 Master Script.  It can be run
# independently by giving it the arguments listed below:

# Specifying where things are located
L1=$1
LOG=$2
CHOPPER=$3
JOBQUEUE=$4
MAC=$5
PASSWORDFILE=$6
GRIDREADY=$7
PCAFILE=~/run.txt
SERVERDIR=~/BufferScripts/buffer
DATA=$8
FL=$9
LS=${10}
REDISHOST=${11}
ZDAB=${12}

# This function is a wrapper for Stonehenge, which will send the appropriate
# signals to the server
chopper()
{
$CHOPPER -i /dev/stdin -o $NAME -r $PASSWORD -c $CONFIGFILE -s $TRIES >> $LOG
if [ $? -eq 0 ]
then
  echo SUCCESS - Stonehenge finished processing file $FILE successfully. 
  touch $SERVERDIR/filereceived 
else
  echo WARNING - Stonehenge exited on file $FILE. 
  if [ $TRIES -lt 2 ]
  then
    echo INFO - Trying to read file $FILE again. 
    touch $SERVERDIR/filetryagain
  else
    echo ERROR - Three failured trying to process file $FILE.  Moving on. 
    touch $SERVERDIR/filefailed
  fi
fi
}

# This function updates the text files holding the lists of files available 
# on the builder, and the list of files we have already processed.
updatefilelists()
{
# Get the list of files needing processing
ls $DATA/SNOP*.zdab > temp.txt
sort temp.txt > $LS
rm temp.txt

# If there is no $FL file, assume we want to start from present
if [ ! -f $FL ]
then
  cp $LS $FL
fi

# Drop files from $FL no longer in $LS
comm -12 $LS $FL > temp.txt
sort temp.txt > $FL
rm temp.txt
}

# MAIN - Control flow begins here
echo SUCCESS - L2 Client starting
TRIES=0
OLDRUN=0
while true
do
    DONE=0
# First get appropriate file
#////////////////////////////
    updatefilelists

# Find next file to process
    COUNT=0
    while [ $(comm -23 $LS $FL | wc -l) -lt 1 ]
    do
      sleep 1
      let COUNT++
      if [ $(( COUNT % 60 )) -eq 0 ]
      then
        echo INFO - Waiting for data
      fi
      updatefilelists
    done
    FILE=$(ls -t $(comm -23 $LS $FL) | tail -n 1)

# Prepare to process file
# TODO - Check different cases for parsing filename:
#        SNOP, default, test
#//////////////////////////
    echo INFO - Receiving file $FILE 
    RUN=$( echo $FILE | awk 'BEGIN {FS="_"}{print $2}' )
    echo $RUN > $PCAFILE
    SUBRUN2=$( echo $FILE | awk 'BEGIN {FS="_"}{print $3}' )
    SUBRUN=$( echo $SUBRUN2 | awk 'BEGIN {FS="."}{print $1}' )
    BIGFILE=$( echo $FILE | awk 'BEGIN {FS="/"}{print $6}' )
    TEMPBIGFILE=$( echo $BIGFILE"."$TRIES)
    NAME=$RUN"_"$SUBRUN 
    PASSWORD=$(cat $PASSWORDFILE)

# Identify the run type and select the appropriate configuration file
# Until we write the runtype program, it is commented out
#//////////////////////////
    if [ $RUN -ne $OLDRUN ]
    then
      OLDRUN=$RUN
#     CONFIGFILE=$(runtype $RUN)
      CONFIGFILE=~/chopper/default.cnfg
    fi 
    
# Receive file - try three times, report errors
    tail -f -c +1 $FILE | tee -a $L1/$TEMPBIGFILE \
                        | chopper &
    PID=$( jobs -lp | tail -n 1)
    redis-cli -h $REDISHOST ZADD l2:process $(date +%s) $BIGFILE
    while [ ! -f $SERVERDIR/filereceived ] && [ ! -f $SERVERDIR/filetryagain ] && [ ! -f $SERVERDIR/filefailed ]
    do
      sleep 1
    done
    if [ -f $SERVERDIR/filereceived ]
    then
      echo DEBUG - filereceived
      rm $SERVERDIR/filereceived
      kill $PID
      echo INFO - Reached end of $FILE
      echo $FILE >> $FL
      TRIES=0
      DONE=1
    elif [ -f $SERVERDIR/filetryagain ]
    then
      rm $SERVERDIR/filetryagain
      kill $PID
      echo INFO - Server will retry reading file $FILE
      let TRIES++
    elif [ -f $SERVERDIR/filefailed ]
    then
      rm $SERVERDIR/filefailed
      kill $PID
      echo INFO - Server will not try to read file $FILE again.
      echo $FILE >> $FL
    else
      echo DEBUG - Message file disappeared
    fi

# If file successfully received, prepare for conversion
    if [ $DONE -eq 1 ]
    then
      mv $L1/$TEMPBIGFILE $L1/$BIGFILE
      cat > $MAC/$NAME.mac << EOF

/rat/physics_list/OmitAll true

/run/initialize

/rat/proclast outroot
/rat/procset file "$NAME.l2.root"

/rat/inzdab/read $ZDAB/$NAME.zdab

exit
EOF

      JOBFILE=$JOBQUEUE/$NAME
      echo ~/bufferscripts/buffer/job $MAC $NAME $L1/$BIGFILE $GRIDREADY \
             $REDISHOST >> $JOBFILE
      echo SUCCESS - Stonehenge done with run $NAME
      redis-cli -h $REDISHOST ZREM l2:process $BIGFILE
      redis-cli -h $REDISHOST ZADD l2:wait $(date +%s) $BIGFILE
    else
      if [ ! $TRIES -lt 2 ]
      then
        echo ERROR - Stonehenge could not process run $NAME
        redis-cli -h $REDISHOST ZREM l2:process $BIGFILE
        redis-cli -h $REDISHOST ZADD l2:fail $(date +%s) $BIGFILE
        TRIES=0
      fi
    fi
done
