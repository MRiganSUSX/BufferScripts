#!/bin/bash

#    This script serves the next unserved Event Builder file to the Buffer.
# It selects the oldest file from ~/data_temp not on its list of served files
# and pushes the file, preceded by its name, into the fifo "pipe" located in
# this directory.
#    The server does not read what it passes and does not know when it reaches
# the end of the file.  It therefore relies on the client to advise it that
# the file has ended (which the Chopper knows because of the structure of
# zdab files).  This information is passed through an empty filerecieved file
# written into this directory.
#    The server records in $LOG the files which it has started and finished 
# pushing to the pipe.  It also updates the list of served files at $FL.

DATA=$1
FL=$2
LS=$3

while true
do
# Get list of files needing serving
    ls -tr $DATA/*.zdab > $LS

# If there is no $FL file, assume we want to start from present
    if [ ! -f $FL ]
    then
        ls -tr $DATA/*.zdab > $FL
    fi

    while [ $(comm -23 $LS $FL | wc -l) -lt 1 ]
    COUNT=0
    do
        sleep 1
        COUNT=$(($COUNT+1))
        if ! (($COUNT % 600))
        then
          echo INFO - Waiting for data
        fi
    done

    FILE=$(comm -23 $LS $FL | head -n 1)

# If we have a new file, serve it and the filename to the buffer
    cat > tmp/filename.txt << EOF

$FILE
EOF

    echo INFO - Pushing $FILE to pipe
    tail -c +1 tmp/filename.txt > pipe
    tail -f -c +1 $FILE > pipe &
    while [ ! -f filereceived ]
    do
        sleep 1
    done
    rm filereceived
    kill %?tail
    echo INFO - Reached end of $FILE
    echo $FILE >> $FL 

done
