#!/bin/bash

# This script can start and stop the three main components of the L2 system:
# the client, convert, and manager scripts.  It tracks the PGIDs of these
# processes in the file $PGID.  When starting, it also ensures that the 
# necessary files and directory structures are present, and, if not, constructs
# them.

# Organization of locations.  Set directory structure here:
BS=$HOME/BufferScripts              # Path to the BufferScripts repository
FILESYSTEM=/mnt/data                # Buffer filesystem
L1=$FILESYSTEM/l1data               # Directory for raw data
LOGDIR=$BS/log                      # Central location for L2 log files
ZDAB=$BS/zdab                       # Directory for post-L2 zdab files
MAC=$BS/mac                         # Directory for conversion macros
GRIDREADY=$FILESYSTEM/l2t           # Output directory for finished products
RATENV=$HOME/rat_env.sh             # Location of rat_env.sh script
MONITOR=$HOME/minard/bin/monitor.py # Location of the monitoring script
DONTDELETE=$BS/dontdelete           # directory for writing deletion locks
SSHFS=/local/eventbuilder           # directory where builder is sshfs mounted
CHOPPER=~/chopper/stonehenge.sh     # Location of Stonehenge program
PASSWORDFILE=$HOME/password.txt     # Location of password file
REDISHOST=snotpenn01                # Location of monitoring redis db
#----------------------------------------------------------
# Below this line we specify the relative paths to different components of
# the L2 system.  This should not need to be edited to reflect local installations.
SERVERFL=$BS/buffer/served.txt
SERVERLS=$BS/buffer/ls.txt
CLIENT=$BS/buffer/client
CLIENTLOG=$LOGDIR/client.log
JOBQUEUE=$BS/jobqueue.txt
CONVERT=$BS/buffer/convert
CONVERTLOG=$LOGDIR/convert.log
MANAGER=$BS/buffer/manager
PGIDFILE=$BS/pgid.txt
SETPGID=/$BS/pgid
#-----------------------------------------------------------

# Prints the help text
printhelp() {
  echo -e 'This is the L2 Trigger Master Script.'
  echo -e 'It takes the following arguments:'
  echo -e '-a \t \t Start all scripts'
  echo -e '-k \t \t Stop all scripts'
  echo -e '-s [string] \t Start script [string]'
  echo -e '-z [string] \t Stop script [string]'
  echo -e '-h \t \t Print this help text'
}

# This function parses the PGID file
parsepgid(){
  if [ ! -f $PGIDFILE ]
  then
    clientpgid=0
    convertpgid=0
    managerpgid=0
  else
    count=0
    while read -r line
    do
      let count++
      case "$count" in
        1)
          clientpgid=$line
          ;;
        2)
          convertpgid=$line
          ;;
        3)
          managerpgid=$line
          ;;
        *)
          echo Invalid PGID file!
          exit 1
          ;;
       esac
    done < $PGIDFILE 
  fi
}

# This function updates the PGID file
# Should only be called if parsepgid has already been called
writepgid(){
  echo -e $clientpgid '\n'$convertpgid '\n'$managerpgid > $PGIDFILE 
}

# This function starts individual scripts
# If script already running, prints message
startprocess(){
  parsepgid
  case "$1" in
    "client")
      if [ $clientpgid -eq 0 ]
      then
        $CLIENT $L1 $CLIENTLOG $CHOPPER $JOBQUEUE $MAC $PASSWORDFILE \
        $GRIDREADY $SSHFS $SERVERFL $SERVERLS | $MONITOR L2-client &
        clientpid=$(jobs -lp | tail -n 1)
        $SETPGID $clientpid
        clientpgid=$clientpid
      else
        echo Client process was already running.
      fi
      ;;
    "convert")
      if [ $convertpgid -eq 0 ]
      then
        $CONVERT $JOBQUEUE $CONVERTLOG $MAC $RATENV | $MONITOR L2-convert &
        convertpid=$(jobs -lp | tail -n 1)
        $SETPGID $convertpid 
        convertpgid=$convertpid
      else
        echo Convert process was already running.
      fi
      ;;
    "manager")
      if [ $managerpgid -eq 0 ]
      then
        $MANAGER $FILESYSTEM $L1 $DONTDELETE $REDISHOST $MAC | \
         $MONITOR L1-delete &
        managerpid=$(jobs -lp | tail -n 1)
        $SETPGID $managerpid 
        managerpgid=$managerpid
      else
        echo Manager process was already running.
      fi 
      ;;
    *)
      echo -e 'Invalid process name passed\n'
      echo -e 'Valid options are client, convert, manager\n'
      exit 1
      ;;
  esac
  writepgid
}

# This function kills individual scripts and their decendents
# If the script is not running, prints message.
stopprocess(){
  parsepgid
  case "$1" in
  "client")
    if [ $clientpgid -ne 0 ]
    then
      kill -- -$clientpgid
      clientpgid=0
    else
      echo Client process was not running.
    fi
    ;;
  "convert")
    if [ $convertpgid -ne 0 ]
    then
      kill -- -$convertpgid
      convertpgid=0
    else
      echo Convert process was not running.
    fi
    ;;
  "manager")
    if [ $managerpgid -ne 0 ]
    then
      kill -- -$managerpgid
      managerpgid=0
    else
      echo Manager process was not running.
    fi
    ;;
  *)
    echo -e 'Invalid process name passed.\n'
    echo -e 'Valid options are client, convert, and manager.\n'
    exit 1
    ;;
  esac
  writepgid
}

# This function sets up the L2 scripts to start
start_all(){
  parsepgid
  if [[ "$clientpgid" -eq 0 && "$convertpgid" -eq 0 && "$managerpgid" -eq 0 ]]
  then
    echo Preparing file structure...
    if [ ! -d $LOGDIR ]
    then
      mkdir $LOGDIR
    fi
    if [ ! -d $ZDAB ]
    then
      mkdir $ZDAB
    fi
    if [ ! -d $MAC ]
    then
      mkdir $MAC
    fi
    if [ ! -d $L1 ]
    then
      mkdir $L1
    fi
    if [ ! -f $JOBQUEUE ]
    then
      touch $JOBQUEUE
    fi
    if [ ! -d $SSHFS ]
    then
      echo SSHFS not mounted.  Please mount before continuing.
      exit 0
    fi
    echo File structure prepared.
    echo Starting level 2 scripts...
    startprocess client
    startprocess convert
    startprocess manager
  else
    echo Some processes were already running.  Please stop all scripts before \
         using the -a option.  If you do not want to stop running processes, \
         you can start the processes one at a time using the -s option.
  fi
}

stop_all(){
  echo Killing L2 processes
  stopprocess client
  stopprocess convert
  stopprocess manager
}

# MAIN
if [[ $# -eq 0 ]]
then
  printhelp
fi

while getopts "h?aks:z:" opt
do
  case "$opt" in
  h)
    printhelp
    exit 0
    ;;
  a)
    start_all
    exit 0
    ;;
  k)
    stop_all
    exit 0
    ;;
  s)
    name=$OPTARG
    startprocess $name
    ;;
  z)
    name=$OPTARG
    stopprocess $name
    ;;
  *)
    echo -e 'Invalid argument\n'
    ;;
  esac
done
