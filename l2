#!/bin/bash

# This script can operate and monitor the BufferScripts needed
# to run the L2 trigger.  It keeps track of the PIDs of the various
# processes.  At start, it also ensures that the necessary files and
# directory structures are present, and, if not, constructs them.

# Organization of locations.  Set directory structure here:
BUILDER=snotdaq@builder1.sp.snolab.ca # Access to Event Builder
BS=$HOME/BufferScripts                # Home directory of the Buffer Scripts
LOGDIR=$BS/log                        # Central location for L2 log files

LOCALSERVER=$BS/builder/l2server      # Location of local copy of L2server code
SERVERDIR=/Users/snotdaq/server       # Directory of L2 server on the builder
SERVER=$SERVERDIR/l2server            # filename of L2 server
SERVERLOG=$SERVERDIR/server.log       # filename of Server log
SERVERFL=$SERVERDIR/served.txt        # file recording served files 
SERVERDATA=/Users/snotdaq/data_temp   # Directory for the Builder output files
SERVERLS=$SERVERDIR/ls.txt            # filename for list of available files

PIPE=$SERVERDIR/pipe                  # Location of builder > buffer pipe

CLIENT=$BS/buffer/client              # Location of the client script
CLIENTDIR=$HOME/data                  # Directory for unfinished outputs
CLIENTLOG=$LOGDIR/client.log          # filename of the client log file
CHOPPER=~/chopper/chopper             # Location of the chopper program

RUNJOB=$BS/buffer/runjobs             # Location of the runjobs script
RUNJOBLOG=$LOGDIR/runjobs.log         # filename of runjob's log

GRIDREADY=/mnt/data/l2t               # Output directory for finished products
GLUER=$BS/buffer/gluer                # Location of the gluer script
GLUERLS=$LOGDIR/gluerls.txt           # filename of list of available subruns
GLUERERR=$LOGDIR/gluererror.txt       # filename of list of failed subruns
GLUERFL=$LOGDIR/gluerfl.txt           # filename of list of chopped files

# Variables in which to store PIDs of the various monitoring scripts
serverpid=0
clientpid=0
batchpid=0
gluerpid=0

# These functions print the menu options
function printmenu {
    echo "1) Start"
    echo "2) Stop"
    echo "3) Details"
    echo "4) Status"
    echo "5) Quit"
    echo "6) Help"
}
function printdetailmenu {
    echo Start and Stop allow you to control specific scripts.
    echo Select Cancel to return to main menu.
    echo "1) Start"
    echo "2) Stop"
    echo "3) Cancel"
}

# This function prints lists of running and not-running processes
function processes {
    echo Here are the processes running at this time:
    if [ "$serverpid" -ne 0 ]
    then
        echo -e "\t server \t $serverpid"
    else
        NO+="\tserver\n"
    fi
    if [ "$clientpid" -ne 0 ]
    then
        echo -e "\t client \t $clientpid"
    else
        NO+="\tclient\n"
    fi
    if [ "$batchpid" -ne 0 ]
    then
        echo -e "\t batch \t $batchpid"
    else
        NO+="\tbatch\n"
    fi
    if [ "$gluerpid" -ne 0 ]
    then
        echo -e "\t gluer \t $gluerpid"
    else
        NO+="\tgluer\n"
    fi
    echo Here are the processes not running at this time:
    echo -e $NO
    NO=""
}

# This function will display the current status of each file in the system
function printstatus {
    for i in $(find $CLIENTDIR -maxdepth 1 -mindepth 1 -type d)
    do
        files1=$(ls $i/zdab | wc -l)
        files2=$(ls $i/root | wc -l)
        base=basename $i
        echo $base:  available chunks: $files1  processed chunks: $files2
    done
}

# These functions allow you to select particular processes for action
function startselect {
    echo Select the number of the script you wish to start.
    echo If you do not wish to start any processes at this time, select cancel \
          to return to the previous menu.
    startoptions=("server" "client" "batch" "gluer" "cancel")
    select opt3 in "${startoptions[@]}"
        do
            case $opt3 in
                "server")
                    if [ "$serverpid" -eq 0 ]
                    then
                        ssh $BUILDER $SERVER $SERVERDATA $SERVERLOG $SERVERFL \
                             $SERVERLS &
                        serverpid=$(jobs -l | tail -n 1 | awk '{print $2}')
                    else
                        echo server already running.  You must stop server \
                              before starting it again.
                    fi
                    ;;
                "client")
                    if [ "$clientpid" -eq 0 ]
                    then
                        $CLIENT $BUILDER $PIPE $CLIENTDIR $CHOPPER &
                        clientpid=$(jobs -l | tail -n 1 | awk '{print $2}')
                    else
                        echo client already running.  You must stop client \
                              before starting it again.
                    fi
                    ;;
                "batch")
                    if [ "$batchpid" -eq 0 ]
                    then
                        $RUNJOB $RUNJOBLOG $CLIENTDIR &
                        batchpid=$(jobs -l | tail -n 1 | awk '{print $2}')
                    else
                        echo batch already running.  You must stop batch \
                              before starting it again.
                    fi
                    ;;
                "gluer")
                    if [ "$gluerpid" -eq 0 ]
                    then
                        $GLUER $GRIDREADY $CLIENTDIR $GLUERLS $GLUERERR \
                         $GLUERFL &
                        gluerpid=$(jobs -l | tail -n 1 | awk '{print $2}')
                    else
                        echo gluer already running.  You must stop gluer \
                              before starting it again.
                    fi
                    ;;
                "cancel")
                    echo Returning to previous menu
                    printdetailmenu
                    break
                    ;;
                *)
                    echo Invalid option.  Try again.
                    ;;
            esac
        done
}

function stopselect {
    echo Enter the number of the process you wish to stop.
    echo If you do not wish to stop any process at this time, select "Cancel" \
          to return to the previous menu.
    stopoptions=("sever" "client" "batch" "gluer" "cancel")
    select opt4 in "${stopoptions[@]}"
        do
            case $opt4 in
                "sever")
                    if [ "$serverpid" -ne 0 ]
                    then
                        ssh $BUILDER killall l2server
                        kill $serverpid
                        serverpid=0
                    else
                        echo Server not currently running.  You must start it \
                              before stopping it.
                    fi
                    ;;
                "client")
                    if [ "$clientpid" -ne 0 ]
                    then
                        kill $clientpid
                        clientpid=0
                    else
                        echo Client not currently running.  You must start it \
                              before stopping it.
                    fi
                    ;;
                "batch")
                    if [ "$batchpid" -ne 0 ]
                    then
                        kill $batchpid
                        batchpid=0
                    else
                        echo Runjobs not currently running.  You must start it \
                              before stopping it.
                    fi
                    ;;
                "gluer")
                    if [ "$gluerpid" -ne 0 ]
                    then
                        kill $gluerpid
                        gluerpid=0
                    else
                        echo Gluer not currently running.  You must start it \
                              before stopping it.
                    fi
                    ;;
                "cancel")
                    echo Returning to previous menu.
                    printdetailmenu
                    break
                    ;;
                *)
                    echo Invalid menu option.  Please try again.
                    ;;
            esac
        done
}

# This function is the submenu for the details option
function details {
    detailoptions=("Start" "Stop" "Cancel")
    select opt2 in "${detailoptions[@]}"
        do
            case $opt2 in
                "Start")
                    startselect
                    ;;
                "Stop")
                    stopselect
                    ;;
                "Cancel")
                    echo Returning to main menu
                    break
                    ;;
                *)
                    echo Invalid selection.  Try again.
                    ;;
            esac
        done
}

# This function prints the welcome message
function printwelcome {
echo "*************************************************************************"
echo "**       Welcome to the SNO+ Level II Trigger user interface           **"
echo "**                                                                     **"
echo "**  BASIC USAGE:                                                       **"
echo "**      + Select 'Start' to start all scripts                          **"
echo "**      + Select 'Stop' to kill all scripts                            **"
echo "**      + Select 'Quit' to exit the program                            **"
echo "**      + Select 'Help' to print this message                          **"
echo "**                                                                     **"
echo "**  EXPERT USAGE:                                                      **"
echo "**      + Select 'Details' to start or stop specific scripts           **"
echo "**      + Select 'Status' to see system status and log files           **"
echo "**                                                                     **"
echo "*************************************************************************"
}

#
# MAIN LOOP BEGINS HERE
#
source ~/rat_env.sh

while true
do
    printwelcome

    options=("Start" "Stop" "Details" "Status" "Quit" "Help")
    select opt in "${options[@]}"
	do
	    case $opt in
        	"Start")
                    if [[ "$serverpid" -eq 0 && \
                          "$clientpid" -eq 0 && \
                          "$batchpid" -eq 0 && \
                          "$gluerpid" -eq 0 ]];
                    then
                        echo Preparing file structure...
                        ssh $BUILDER rm $PIPE
                        ssh $BUILDER mkfifo $PIPE
                        scp $LOCALSERVER $BUILDER:$SERVER
                        if [ ! -d $LOGDIR ]
                        then
                            mkdir $LOGDIR
                        fi
                        if [ ! -d $CLIENTDIR ]
                        then
                            mkdir $CLIENTDIR
                        fi
                        echo File structure prepared.
                        echo Starting level 2 scripts...
        	            ssh $BUILDER $SERVER $SERVERDATA $SERVERLOG $SERVERFL \
                             $SERVERLS &
    	                serverpid=$(jobs -l | tail -n 1 | awk '{print $2}')
        	            $CLIENT $BUILDER $PIPE $CLIENTDIR $CHOPPER &
	                    clientpid=$(jobs -l | tail -n 1 | awk '{print $2}')
                        $RUNJOB &
	                    batchpid=$(jobs -l | tail -n 1 | awk '{print $2}')
                        $GLUER $GRIDREADY $CLIENTDIR $GLUERLS $GLUERERR \
                         $GLUERFL &
                        gluerpid=$(jobs -l | tail -n 1 | awk '{print $2}')
                        printmenu
                    else
                        echo Some processes were already running.  Please stop \
                              all scripts before using the Start All option.  \
                              If you do not want to stop running processes, \
                              you can start processes one at a time in the \
                              Details options.
                    fi
        	    ;;
	        "Stop")
        	    echo Killing monitoring processes
                    if [ "$serverpid" -ne 0 ]
                    then
                        ssh $BUILDER killall l2server
	                    kill $serverpid
                        serverpid=0
                    fi
                    if [ "$clientpid" -ne 0 ]
                    then
        	            kill $clientpid
                        clientpid=0
                    fi
                    if [ "$batchpid" -ne 0 ]
                    then
	                    kill $batchpid
                        batchpi=0
                    fi
                    if [ "$gluerpid" -ne 0 ]
                    then
                        kill $gluerpid
                        gluerpid=0
                    fi
                    printmenu
        	    ;;
	        "Details")
                processes
                echo Select below to start or stop particular processes
                echo If you wish to return to the main menu, select cancel.
                details
                printmenu
	            ;;
            "Status")
                stty -echo -icanon time 10 min 0
                keypress=''
                while [[ "x$keypress" == "x" ]]
                do
                    echo To stop monitoring and return to Main menu, press \
                          any key at any time.
                    processes
                    printstatus
                    read keypress
                done
                stty sane 
                printmenu
                ;;
            "Quit")
                if [[ "$serverpid" -eq 0 && \
                      "$clientpid" -eq 0 && \
                      "$batchpid" -eq 0 && \
                      "$gluerpid" -eq 0 ]];
                then
                    echo Goodbye
                    exit
                else
                    echo You have unstopped processes.  Please stop all \
                         processes before exiting the user interface, or it \
                         will be a pain to recover.
                fi
                printmenu
                ;;
            "Help")
                printwelcome
                printmenu
                ;;
        	*)
	            echo Invalid option
                printmenu
        	    ;;
	    esac
	done
done
